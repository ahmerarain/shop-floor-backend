name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 22
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-

      - name: Build for Default Branch
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/main'
        run: echo "Build for Default Branch"

      - name: Build for Development Branch
        if: github.ref == 'refs/heads/main'
        run: echo "Build for Development Branch"

      - name: Build for Production
        if: github.ref == 'refs/heads/main'
        run: |
          npm ci
          npm run build
          # Include package-lock.json if it exists
          zip -r package.zip dist/ public/ package.json tsconfig.json tspaths.js
          if [ -f "package-lock.json" ]; then
            zip -ur package.zip package-lock.json
          fi

      - name: Upload artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: package.zip

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: package

      - name: Deploy to Production AWS EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          SERVER_DEV: ${{ secrets.SERVER_DEV }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH_DEV }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -i private_key -o StrictHostKeyChecking=no package.zip ${EC2_USER}@${SERVER_DEV}:${REMOTE_PATH}/
          ssh -i private_key -o StrictHostKeyChecking=no ${EC2_USER}@${SERVER_DEV} "unzip -o ${REMOTE_PATH}/package.zip -d ${REMOTE_PATH} && cd ${REMOTE_PATH} && npm ci && pm2 restart FF_DEV"
          rm -f private_key
